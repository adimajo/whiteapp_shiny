name: R package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
      - name: Install dependencies for devtools
        run: |
          sudo apt-get update -y
          sudo apt-get install libgit2-dev libssh2-1-dev libcurl4-openssl-dev pandoc libharfbuzz-dev libfribidi-dev -y
      - name: Install devtools
        run: install.packages("devtools")
        shell: Rscript {0}
      - name: Check code style
        run: |
          Rscript -e 'install.packages(c("styler", "lintr"))'
          Rscript inst/pipeline/lint.R
      - name: Install dependencies
        run: devtools::install_deps(dependencies = TRUE)
        shell: Rscript {0}
      - name: Install package
        run: |
          Rscript -e "devtools::install()"
          export APPLICATION_TAG_VERSION=`r -e 'library(WhiteAppRShiny); cat(find_packages_versions())'`
      - name: Build documentation
        run: |
          Rscript -e 'install.packages("pkgdown")'
          Rscript inst/pipeline/document.R
      - name: Upload documentation
        env:
          APP_TOKEN: ${{ secrets.APP_TOKEN }}
        run: |
          git clone --branch pages https://adimajo:$APP_TOKEN@github.com/adimajo/whiteapp_shiny.git docs_to_publish
          rm -rf docs_to_publish/docs
          mkdir docs_to_publish/docs
          cp -r docs/* docs_to_publish/docs/
          cd docs_to_publish
          export LATEST_COMMITER_EMAIL=`git --no-pager log -1 -s --format="%ae"`
          echo $LATEST_COMMITER_EMAIL
          git config --global user.email $LATEST_COMMITTER_EMAIL
          git config --global user.name $GITHUB_ACTOR
          echo "git config worked"
          git add -A
          echo "git add worked"
          if [ ! git diff-index --quiet HEAD -- ] ; then git commit -am "Rollout documentation for version $APPLICATION_TAG_VERSION" && git push; else echo "Nothing to push"; fi
      - name: Check package (as CRAN)
        run: devtools::check(document = FALSE, args = "--no-tests", error_on = "warning")
        shell: Rscript {0}
      - name: Testthat
        run: devtools::test(quiet = FALSE, clean = FALSE)
        shell: Rscript {0}
      - name: Coverage
        run: print(devtools::test_coverage())
        shell: Rscript {0}
      - name: Check on Mac OS
        env:
          RHUB_TOKEN: ${{ secrets.RHUB_TOKEN }}
        run: Rscript inst/rhubcheck.R "macos-highsierra-release-cran" "$RHUB_TOKEN"
      - name: Check on Windows
        env:
          RHUB_TOKEN: ${{ secrets.RHUB_TOKEN }}
        run: Rscript inst/rhubcheck.R "windows-x86_64-devel" "$RHUB_TOKEN"
